#FUNCIONES 

import random   #use esto para generar legajos y notas 


#DATOS HARDCODEADOS
legajos_hardcode = [ "36334","23303","19948","51506","37502","46221","45278","21671","30857",
            "17472","10607","46806","37082","16118","41920","16077","10307","29361",
            "10881","21688","42716","48423","34783","12972","46534","36969","15764","51323","49678","32078"]


nombres_hardcode = ["ana","carlos","maria","marta","sergio","andres","martin","paula","melina","florencia","marcos",
                    "lana","carla","sol","nahuel","pablo","mateo","jesus","victoria","isabel",
                    "oscar","miguel","nicolas","agustin","hernan",]


generos_hardcore = ["F","M","F","M","M","X","M","F","F","M","F","F","F","M","F"
           ,"F","F","X","F","F","X","F","F","M","M","M","M","M","M","F"
           ,]


notas_hardcode = [  [6,7,6,5,2], #0
                    [8,7,7,5,10],
                    [2,1,9,3,6],
                    [8,8,9,9,9],
                    [6,7,9,3,4],
                    [3,4,3,4,8],
                    [2,1,7,10,3],
                    [1,7,10,2,10],
                    [6,3,7,9,8],
                    [8,8,10,7,6],  
                    [1,7,5,9,5], #10
                    [9,4,3,4,7],
                    [3,4,6,3,1],
                    [7,5,5,3,1],
                    [2,5,3,3,4],
                    [5,10,1,5,1],
                    [5,6,8,2,3],
                    [3,9,10,3,7],
                    [6,5,9,7,9],
                    [3,2,10,2,5], 
                    [3,9,4,3,1], #20
                    [8,5,4,7,9],
                    [1,6,4,2,10],
                    [10,7,10,3,9],
                    [4,7,2,1,3],
                    [1,2,6,1,8],
                    [10,10,4,3,3],
                    [8,8,1,8,2],
                    [8,4,1,8,9],
                    [6,5,1,2,2] ] #29  





#FUNCIONES DEL PUNTO 1 

def iniciar_matriz(cantidad_filas,cantidad_columnas,valor_inicial)->list:
    matriz = []
    for i in range(cantidad_filas):
        fila = [valor_inicial] * cantidad_columnas

        matriz += [fila]

    return matriz 





        

#cargas 

#CARGA SECUENCIAL TEXTO original 
def cargar_matriz_secuencialmente_texto(matriz:list):
    #agregar las validaciones que sean necesarias
    for i in range(len(matriz)):
        for j in range(len(matriz[i])):
            matriz[i][j] = (input(f"fila{i} Columna {j}: "))

        
    return matriz 


#verificar numero string 
def verificar_numero_string(cadena):
    bandera = False
    for i in cadena:
        cod_ascii = ord(i)

        if (cod_ascii >= 48 and cod_ascii <=57):
            bandera = True
            
        
        elif cod_ascii == 45:
            bandera = True
            
            
        else:
            bandera = False
            
            
    return bandera 


#revisar esto, arroja true cuando aun hay una letra
def verificar_numero_lista(cadena:list):
    bandera = False
    for i in range(len(cadena)):
        for j in range(len(cadena[i])):
            cod_ascii = ord(str(i))

            if (cod_ascii >= 48 and cod_ascii <=57):
                bandera = True
                print("son numeros")
            
            elif cod_ascii == 45:
                bandera = True
                print("numero negativo ingresado")
                
            else:
                bandera = False
                print("no valido ")


    return bandera 





#hecho por un compañero en clase 
#valida si lo ingresado son letras 
def verificar_cadena_alfabetica(cadena):
    bandera1 = False
    for i in cadena:
            cod_ascii = ord(i) #convierte a ascii 
            if (cod_ascii >= 65 and cod_ascii <= 90) or (cod_ascii >= 97 and cod_ascii <= 122): #verifica que sean letras, mayusculas o minusculas
                bandera1 = True        
            
            else:
                bandera1 = False
                
        

            return bandera1


#carga secuencial (nombres) |  IMPORTANTE NO MEZCLAR CON NUMEROS,  ESTO MANEJA STRINGS
  
def cargar_matriz_secuencialmente_nombres(matriz: list):
    
    for i in range(len(matriz)):
        for j in range(len(matriz[i])):
            while True:    #necesito este bucle para volver a pedir input y salir tranquilamente 
                nombre_a_cargar = input(f"Nombre:{i}  ")
                bandera = verificar_cadena_alfabetica(nombre_a_cargar)  
                # la funcion devuelve True si el ingreso son letras, false si es otra cosa 

                if bandera == True :   #si es verdadero 
                    matriz[i][j] = nombre_a_cargar   #carga el nombre en la lista
                    print("validado correctamente") 
                    break     # salgo del while 
                else:                           # si es Falso, imprime esto, no toca la lista 
                    print("caracter incorrecto, intente de nuevo")
    
    return matriz


#cargar generos 
def cargar_matriz_secuencialmente_generos(matriz: list,nombres):
    for i in range(len(matriz)):
        while True:    #necesito este bucle para volver a pedir input y salir tranquilamente
            genero = input(f"Genero de :{nombres[i]} posicion {i}  ")
            bandera = verificar_cadena_alfabetica(genero)  #la funcion devuelve True si la variable tiene letras

            if bandera == True and len(genero)==1: #solo quiero 1 caracter 
                if genero == "f" or genero == "x" or genero == "m": #si esta dentro de las opciones validas 
                    matriz[i] = genero                                #lo incluyo 
                    print("ingresado correctamente")
                    break   #rompo aca para evitar que vaya al resto del codigo 
                
                else:
                    print("incorrecto, ingrese solo una letra")
                    
            else:
                print("incorrecto,ingrese x-f-m")       
        
        
    return matriz



#cargar notas en lista  + validacion de numero entre 1 y 10  
def cargo_notas_en(lista,legajos,nombres)->list:
    b = len(lista)                          
    lista_suplente = iniciar_matriz(b,5,0)  #b = largo de lista
    for i in range(len(lista)):
        for j in range(len(lista[i])):
            while True:
                notas = input(f"ingrese 5 notas, una a la vez para el alumno:{i} legajo- {legajos[i]} , nombre: {nombres[i]} lugar: {j+1} ")    
                
                if len(notas) == 2 and ord(notas[0])== ord("1") and ord(notas[1])== ord("0"): #si son dos cifras y a la vez son 1 y 0
                    lista_suplente[i][j] = int(notas)     #añadir a la lista 
                    break  #rompo aca para que no recorra todo el resto del codigo 
                
                elif len(notas)== 2 or len(notas)== 0:  #si son dos cifras o un espacio 
                    print("caracter/es no validos")
                    continue  #lo excluyo 
            
                if len(notas)== 1 :     #si la cifra es 1, 
                    if ord(notas) >57 or ord(notas)<48: #valido que sea numero 
                        print("caracter invalido, ingrese un numero")
                        continue
                    else:               #lo que logre pasar por todo lo anterior es añadido 
                        lista_suplente[i][j] = int(notas) 
                        break
                if len(notas) >2:  # si el largo es mayor a dos, lo descarto  
                    print("invalido, la nota debe ser de 2 cifras como maximo")
                    continue
                
                
                
                
                
                break
                        #banderita = True
        
    lista = lista_suplente
    
        

    return lista 




#carga legajos + validacion de numeros y 5 cifras 

def cargar_legajos_en(lista: list, nombres):
    lista_suplente = iniciar_matriz(30, 1, 0)
    
    for i in range(len(lista)):
        for j in range(len(lista[i])):
            while True:                                     #escribo j+1 para que no empiece a contar desde 0 
                notas = input(f"Ingrese un legajo de 5 números para el alumno {i}-{nombres[i]} lugar {j+1}: ")

                if len(notas) != 5: # valido que sean 5 
                    print("invalido, ingrese un numero de 5 cifras  ")
                    continue   #si no lo son, los excluyo 
                
                bandera = True  #la pongo aca porque quiero que se reinicie en cada pasada
                for k in notas:    #este for lo necesito para iterar 1x1 los 5 numeros del legajo
                    if ord(k) < 48 or ord(k) > 57:   #valido si son numeros 
                        bandera = False
                        break  

                if bandera == False:
                    print("No valido, ingresa solamente numeros")
                    continue

                # Si pasa los filtros guardo el valor
                lista_suplente[i][j] = int(notas)
                print("Legajo cargado correctamente  ")
                break  

    lista = lista_suplente
    return lista
 


#promedio en matrices
def promedio_en_matrices(matriz:list)->list[float]:
    promedios_guardados = []
   

    for i in matriz:   #recorro la matriz 
        suma_de_numeros = 0

        for j in i: #recorro numero por numero dentro de las sublistas 
            suma_de_numeros += j  # aca sumo cada elemento de la sublista [0,1,2,3,4] = [10] por ejemplo
             
        promedio = suma_de_numeros /len(i) #la suma de numeros dividida el largo de la sublista  [10] / 5 
        promedios_guardados += [promedio] #lo sumo a la lista final
            
   
    return promedios_guardados



#esta genera notas con random
def notas_creadas(notas:list):
    
    for i in range(3):   #genera 3 
        lista_notas = random.randint(1,10) #entre 1 y 10
        notas[i] = lista_notas    #las agrega a una lista y devuelve 

    return notas 






#funcion de impresion de todas las variables 
def imprimir_todo(nombres, notas, generos, legajos):
    print(f"{'NOMBRE':<10} | {'NOTAS':<20} | {'GENERO':<6} | {'LEGAJO':<6}")
    print("-" * 55)  # línea 
    
    for i in range(len(nombres)):
        print(f"{nombres[i]} | {notas[i]} | {generos[i]} | {legajos[i]}")
        




#Esta muestra todos los datos de un alumno, recibe  
def mostrar_uno(nombres,notas,generos,legajos):
    ingreso = input("ingrese el nombre del estudiante que desea ver: ")
    
    if verificar_cadena_alfabetica(ingreso) == True:
        for i in range(len(nombres)):
            
            if nombres[i] == ingreso:
                print(f"{'NOMBRE' :<10}| {'NOTAS':<20}| {'GENERO':<6}| {'LEGAJO':<6}")
                print(f"{nombres[i]}| {notas[i]}| {generos[i]}| {legajos[i]}")
    else:
        ingreso = input("ingrese el nombre del estudiante que desea ver: ")




#funcion del submenu punto 2 
def mostrar_uno_y_todos(nombres,notas,generos,legajos):
    while True:
        eleccion = input("Seleccione una opcion: \n 1- Mostrar todo \n 2- Mostrar un alumno \n 3-Volver")
        match eleccion:
            case "1":
                imprimir_todo(nombres,notas,generos,legajos)
                
            case "2":
                mostrar_uno(nombres,notas,generos,legajos)
            case "3":
                False
                break





#FUNCIONES DEL PUNTO 4 
    
    
#orden de lista simple ascendente 
def ordenar_lista_ascendente(lista:list):
    for i in range(len(lista)):
        for j in range(len(lista)):
            if lista[i] > lista[j]:
                aux = lista[i] 
                lista[i] = lista[j]
                lista[j] = aux
        

    return lista



 
# misma logica que las funciones de arriba, pero con mas variables: 

#orden de lista ascendente 
def ordenar_lista_por_promedio_ascendente_descendente(promedios,nombres,notas,generos,legajos,bandera):
    if bandera == True:
        for i in range(len(promedios)):
            for j in range(len(promedios)):
                
                if promedios[i] > promedios[j]:
                    aux_promedios = promedios[i] 
                    promedios[i] = promedios[j]
                    promedios[j] = aux_promedios

                    aux_nombres = nombres[i]
                    nombres[i] = nombres[j]
                    nombres[j] = aux_nombres

                    aux_notas = notas[i]
                    notas[i] = notas[j]
                    notas[j] = aux_notas

                    aux_generos = generos[i]
                    generos[i] = generos[j]
                    generos[j] = aux_generos

                    aux_leg = legajos[i]
                    legajos[i] = legajos[j]
                    legajos[j] = aux_leg

                   #ordenar lista con promedio descendente 
    if bandera == False:
       for i in range(len(promedios)):
            for j in range(len(promedios)):
                
                if promedios[i] < promedios[j]:
                    aux_promedios = promedios[i] 
                    promedios[i] = promedios[j]
                    promedios[j] = aux_promedios

                    aux_nombres = nombres[i]
                    nombres[i] = nombres[j]
                    nombres[j] = aux_nombres

                    aux_notas = notas[i]
                    notas[i] = notas[j]
                    notas[j] = aux_notas

                    aux_generos = generos[i]
                    generos[i] = generos[j]
                    generos[j] = aux_generos

                    aux_leg = legajos[i]
                    legajos[i] = legajos[j]
                    legajos[j] = aux_leg
 


#recibe las listas para mostrar promedio mayor o menor segun se le indique por input 
def mostrar_ascendente_o_descendente(promedios,nombres,notas,generos,legajos):
    while True:
        eleccion = input("Seleccione una opcion: \n 1- Mostrar datos por promedio mayor a menor  \n 2- Mostrar datos por promedio de menor a mayor \n 3-Volver  ")
        
        match eleccion:
            case "1":
                ordenar_lista_por_promedio_ascendente_descendente(promedios,nombres,notas,generos,legajos,bandera=True)
                imprimir_con_promedio(promedios,nombres,notas,generos,legajos)
            case "2":
                ordenar_lista_por_promedio_ascendente_descendente(promedios,nombres,notas,generos,legajos,bandera=False)
                imprimir_con_promedio(promedios,nombres,notas,generos,legajos)
            case "3":
                False
                break



#funcion del punto 4 
#imprime recibiendo como primer parametro el promedio ordenado de menor a mayor 
def imprimir_con_promedio(promedio,nombres,notas,generos,legajos):
    print(f"{'PROMEDIO':<10} |{'NOMBRES':<10} |{'NOTAS':<18} |{'GENERO':<6} |{'LEGAJO':<10}")
    for i in range(len(promedio)):
        
        print(f"{promedio[i]} |{nombres[i]} |{notas[i]} |{generos[i]} |{legajos[i]}")


#FUNCIONES DEL PUNTO 5 
    
#ubica y devuelve el mayor de cada sublista (trabaja matrices)
def mayores_en_sublistas(matriz: list):
    mayores = [0] * len(matriz)  
    
    for i in range(len(matriz)):        
        mayor = matriz[i][0]  # supongo que el primero es el mayor
        for j in range(1, len(matriz[i])):  # recorro el resto de los elementos
            if matriz[i][j] > mayor:
                mayor = matriz[i][j]
                
        mayores[i] = mayor # guardo el mayor 


    return mayores


 #requiere una lista, y un indice de columna (ej: lista1,2)
def sumar_por_columnas_y_promediar(lista:list,columna:int):
    suma_columnas = 0
    divisor = len(lista)
    
    for i in lista:
        suma_columnas += i[columna]
    
    promedio_de_columna = suma_columnas / divisor


    return promedio_de_columna




#esta funcion recibe la matriz de calificaciones, calcula promedios y imprime con formato 
#controla el sub menu del punto 5 
def sumar_y_ordenar_promedios_de_columnas(lista):
    while True:
        opciones = input("que desea ver? \n 1- Promedios de todas las notas de mayor a menor \n 2- Ver la/s materia/s con promedio mas alto \n 3-Volver  ")
        match opciones:
            case "1":
                lista_de_sumas = []     #voy a guardar aca 
                promedio_columna0 =sumar_por_columnas_y_promediar(lista,0) # esta funcion suma los numeros de una lista segun el indice que se le de, 0 en este caso
                promedio_columna1 = sumar_por_columnas_y_promediar(lista,1) # retorna el promedio de las columnas de la lista 
                promedio_columna2 = sumar_por_columnas_y_promediar(lista,2)
                promedio_columna3 = sumar_por_columnas_y_promediar(lista,3)
                promedio_columna4 = sumar_por_columnas_y_promediar(lista,4)
                lista_de_sumas += [promedio_columna0]    #sumo todos a una lista final 
                lista_de_sumas += [promedio_columna1]
                lista_de_sumas += [promedio_columna2]
                lista_de_sumas += [promedio_columna3]
                lista_de_sumas += [promedio_columna4]

                promedios_mayores = ordenar_lista_ascendente(lista_de_sumas)  #aca ordeno los promedios 
                for i in range(len(promedios_mayores)):                       #imprimo prolijamente
                    print(f"MATERIA_{i+1}: {promedios_mayores[i]}")  
                                            
            
            case "2":
                lista_de_sumas = [] #aca guardo todos los promedios
                los_promedios_mayores = [] #aca guardo los promedios mayores 

                promedio_columna0 =sumar_por_columnas_y_promediar(lista,0) #cada una de estas variables guarda el promedio de una columna
                promedio_columna1 = sumar_por_columnas_y_promediar(lista,1)
                promedio_columna2 = sumar_por_columnas_y_promediar(lista,2)
                promedio_columna3 = sumar_por_columnas_y_promediar(lista,3)
                promedio_columna4 = sumar_por_columnas_y_promediar(lista,4)
                lista_de_sumas += [promedio_columna0]   #aca las sumo una por una a una lista 
                lista_de_sumas += [promedio_columna1]
                lista_de_sumas += [promedio_columna2]
                lista_de_sumas += [promedio_columna3]
                lista_de_sumas += [promedio_columna4]

                lista_ordenada = ordenar_lista_ascendente(lista_de_sumas) #ordeno la lista  
                for i in range(len(lista_ordenada)): #este for solo esta para imprimir de la manera correcta, sin corchetes 
                    el_promedio_mayor = lista_de_sumas[0] #como ya esta ordenada, se que el mayor numero esta en la posicion 0
                    if lista_de_sumas[i] == el_promedio_mayor:   #si encuentro en la lista de sumas un promedio igual al mayor
                        los_promedios_mayores += [lista_de_sumas[i]] # sumo ese promedio encontrado a otra lista, que va a tener mas de un elemento 
                
                if len(los_promedios_mayores) > 1:  #entonces, si esta lista tiene mas de un elemento, hay mas de un promedio
                    for q in range(len(los_promedios_mayores)): #for para imprimir de la manera correcta 
                        print(f"las materias con mayor promedio son:  MATERIA_{q+1}: {los_promedios_mayores[q]}\n")
                
                else: #si hay un solo elemento, hay solo un promedio mayor
                   print(f"la única materia encontrada con promedio mayor es MATERIA_{i+1}: {el_promedio_mayor} \n")

            case "3":
                break



#FUNCIONES PUNTO 6 


#esta funcion recibe 5 parametros junto con los promedios, imprime los datos de el indice que se le ingrese 
def mostrar_uno_por_legajo(promedios,nombres,notas,generos,legajos):
    ingreso = input("\n ingrese el legajo del estudiante que desea ver: ")
    
    if verificar_numero_string(ingreso) == True:
        for i in range(len(legajos)):
            
            if legajos[i] == ingreso:
                print(f"{'NOMBRE' :<10}| {'NOTAS':<20}|{'promedio':<10} |{'GENERO':<6}| {'LEGAJO':<6}")
                print(f"{nombres[i]}| {notas[i]}|{promedios[i]} |{generos[i]}| {legajos[i]}")
    else:
        ingreso = input("ingrese el legajo del estudiante que desea ver: ")


#funcion de impresion
def imprimir_con_promedio_legajo(promedio,nombres,notas,generos,legajos):
    print(f"|{'LEGAJO':<10} |{'PROMEDIO':<10} |{'NOMBRES':<10} |{'NOTAS':<18} |{'GENERO':<6} ")
    for i in range(len(nombres)):
        
        print(f"{legajos[i]}       |{promedio[i]}         |{nombres[i]}       |{notas[i]}       |{generos[i]} |")
    mostrar_uno_por_legajo(promedio,nombres,notas,generos,legajos)
    

#DESPUES DE LA CORRECCION, ESTA FUNCION NO SE USA 
#esta funcion controla el sub menu del punto 6 
def mostrar_todo_por_legajo(promedios,nombres,notas,generos,legajos):
    while True:
        ingreso = input("Que desea hacer ? \n -1 Buscar un estudiante ingresando su legajo \n 2- mostrar todos")
        
        match ingreso:
            case "1":
                mostrar_uno_por_legajo(promedios,nombres,notas,generos,legajos)
            case "2":
                imprimir_con_promedio_legajo(promedios,nombres,notas,generos,legajos)
            case "3":
                break







    
    
#VARIOS 




#original
def retornar_indice_elemento(lista: list, dato_a_buscar: int) -> int :
    indice_elemento = -1 # inicializado en el caso de no haberlo encontrado
    
    for i in range(len(lista)):
        if lista[i] == dato_a_buscar:
            indice_elemento = i # Cambiar a indice del elemento si se encuenatr
            break # cortar ejecucion debido a que se encontro
    
    return indice_elemento




#funciones del punto 7 

def contador_de_notas(lista:list):
    cantidades = [1,2,3,4,5,6,7,8,9,10]

    contador_1 = 0
    contador_2 = 0
    contador_3 = 0
    contador_4 = 0
    contador_5 = 0
    contador_6 = 0
    contador_7 = 0
    contador_8 = 0
    contador_9 = 0
    contador_10 = 0

    
    for i in lista:
        for numero in i:
            if numero == 1:
                contador_1 +=1
            if numero ==2:
                contador_2 +=1
            if numero == 3:
                contador_3 +=1
            if numero == 4:
                contador_4 +=1
            if numero == 5: 
                contador_5 +=1
            if numero == 6:
                contador_6 +=1
            if numero == 7:
                contador_7 +=1
            if numero == 8:
                contador_8 +=1
            if numero == 9:
                contador_9 +=1
            if numero == 10:
                contador_10 +=1
            
    print(f"{'NUMERO':<2} |  {'CANTDAD DE REPETICIONES':<6} ")
    print(f"{cantidades[0]:<6}  {contador_1:>6} ")
    print(f"{cantidades[1]:<6}  {contador_2:>6} ")
    print(f"{cantidades[2]:<6}  {contador_3:>6} ")
    print(f"{cantidades[3]:<6}  {contador_4:>6} ")
    print(f"{cantidades[4]:<6}  {contador_5:>6} ")
    print(f"{cantidades[5]:<6}  {contador_6:>6} ")
    print(f"{cantidades[6]:<6}  {contador_7:>6} ")
    print(f"{cantidades[7]:<6}  {contador_8:>6} ")
    print(f"{cantidades[8]:<6}  {contador_9:>6} ")
    print(f"{cantidades[9]:<6}  {contador_10:>6} ")
