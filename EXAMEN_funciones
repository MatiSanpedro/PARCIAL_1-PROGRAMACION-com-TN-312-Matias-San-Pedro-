#FUNCIONES 

#FUNCIONES DEL TRABAJO DE CLASE 
import random 

legajos_hardcode = [ "36334","23303","19948","51506","37502","46221","45278","21671","30857",
            "17472","10607","46806","37082","16118","41920","16077","10307","29361",
            "10881","21688","42716","48423","34783","12972","46534","36969","15764","51323","49678","32078"]


nombres_hardcode = ["ana","carlos","maria","marta","sergio","andres","martin","paula","melina","florencia","marcos",
                    "lana","carla","sol","nahuel","pablo","mateo","jesus","victoria","isabel",
                    "oscar","miguel","nicolas","agustin","hernan",]


generos_hardcore = ["F","M","F","M","M","X","M","F","F","M","F","F","F","M","F"
           ,"F","F","X","F","F","X","F","F","M","M","M","M","M","M","F"
           ,]


notas_hardcode = [  [6,7,6,5,2], #0
                    [8,7,7,5,10],
                    [2,1,9,3,6],
                    [8,8,9,9,9],
                    [6,7,9,3,4],
                    [3,4,3,4,8],
                    [2,1,7,10,3],
                    [1,7,10,2,10],
                    [6,3,7,9,8],
                    [8,8,10,7,6],  
                    [1,7,5,9,5], #10
                    [9,4,3,4,7],
                    [3,4,6,3,1],
                    [7,5,5,3,1],
                    [2,5,3,3,4],
                    [5,10,1,5,1],
                    [5,6,8,2,3],
                    [3,9,10,3,7],
                    [6,5,9,7,9],
                    [3,2,10,2,5], 
                    [3,9,4,3,1], #20
                    [8,5,4,7,9],
                    [1,6,4,2,10],
                    [10,7,10,3,9],
                    [4,7,2,1,3],
                    [1,2,6,1,8],
                    [10,10,4,3,3],
                    [8,8,1,8,2],
                    [8,4,1,8,9],
                    [6,5,1,2,2] ] #29  







def iniciar_matriz(cantidad_filas,cantidad_columnas,valor_inicial)->list:
    matriz = []
    for i in range(cantidad_filas):
        fila = [valor_inicial] * cantidad_columnas

        matriz += [fila]

    return matriz 





        

#carga secuencial de matriz 

#CARGA SECUENCIAL TEXTO original 
def cargar_matriz_secuencialmente_texto(matriz:list):
    #agregar las validaciones que sean necesarias
    for i in range(len(matriz)):
        for j in range(len(matriz[i])):
            matriz[i][j] = (input(f"fila{i} Columna {j}: "))

        
    return matriz 

def cargar_matriz_secuencialmente_notas(matriz:list,lista_2):
   
    for i in range(len(matriz)):
        for j in range(len(matriz[i])):
            matriz[i][j] = int(input(f"ingresar nota para {lista_2[i]} lugar {j}: "))

    
    return matriz 


'''am2 = ["juan","marcos","pedro","pepe","lola"]
amt = [[0],[0],[0],[0],[0]]
amt = cargar_matriz_secuencialmente_notas(amt,am2)
print(amt)'''

#cod_ascii = ord(str(i))
#cod_ascii = ord(i)

#verificar numero string 
def verificar_numero_string(cadena):
    bandera = False
    for i in cadena:
        cod_ascii = ord(i)

        if (cod_ascii >= 48 and cod_ascii <=57):
            bandera = True
            
        
        elif cod_ascii == 45:
            bandera = True
            
            
        else:
            bandera = False
            
            
    return bandera 


#revisar esto, arroja true cuando aun hay una letra
def verificar_numero_lista(cadena:list):
    bandera = False
    for i in range(len(cadena)):
        for j in range(len(cadena[i])):
            cod_ascii = ord(str(i))

            if (cod_ascii >= 48 and cod_ascii <=57):
                bandera = True
                print("son numeros")
            
            elif cod_ascii == 45:
                bandera = True
                print("numero negativo ingresado")
                
            else:
                bandera = False
                print("no valido ")


    return bandera 




#numeros
def cargar_matriz_secuencialmente_numeros(matriz:list):
    
    for i in range(len(matriz)):
        for j in range(len(matriz[i])):
            matriz[i][j] = int(input(f"fila{i} Columna {j}: "))

    return matriz 



def verificar_cadena_alfabetica(cadena):
    bandera1 = False
    for i in cadena:
            cod_ascii = ord(i)
            if (cod_ascii >= 65 and cod_ascii <= 90) or (cod_ascii >= 97 and cod_ascii <= 122):
                bandera1 = True        
            
            else:
                bandera1 = False
                
        

            return bandera1


#carga secuencial (nombres) |  IMPORTANTE NO MEZCLAR CON NUMEROS,  ESTO MANEJA STRINGS
  
def cargar_matriz_secuencialmente_nombres(matriz: list):
    
    for i in range(len(matriz)):
        for j in range(len(matriz[i])):
            while True:    #necesito este bucle para volver a pedir input y salir tranquilamente 
                nombre_a_cargar = input(f"Nombre:{i}  ")
                bandera = verificar_cadena_alfabetica(nombre_a_cargar)  
                # la funcion devuelve True si el ingreso son letras, false si es otra cosa 

                if bandera == True :   #si es verdadero 
                    matriz[i][j] = nombre_a_cargar   #carga el nombre en la lista
                    print("validado correctamente") 
                    break     # salgo del while 
                else:                           # si es Falso, imprime esto, no toca la lista 
                    print("caracter incorrecto, intente de nuevo")
    
    return matriz


#cargar generos 
def cargar_matriz_secuencialmente_generos(matriz: list,nombres):
    for i in range(len(matriz)):
        while True:    #necesito este bucle para volver a pedir input y salir tranquilamente
            genero = input(f"Genero de :{nombres[i]} posicion {i}  ")
            bandera = verificar_cadena_alfabetica(genero)  #la funcion devuelve True si la variable tiene letras

            if bandera == True and len(genero)==1: #solo quiero 1 caracter 
                if genero == "f" or genero == "x" or genero == "m": #si esta dentro de las opciones validas 
                    matriz[i] = genero                                #lo incluyo 
                    print("ingresado correctamente")
                    break   #rompo aca para evitar que vaya al resto del codigo 
                
                else:
                    print("incorrecto, ingrese solo una letra")
                    
            else:
                print("incorrecto,ingrese x-f-m")       
        
        
    return matriz



#cargar notas en lista  + validacion de numero entre 1 y 10  
def cargo_notas_en(lista,nombres):
    lista_suplente = iniciar_matriz(30,5,0)
    for i in range(len(lista)):
        for j in range(len(lista[i])):
            while True:
                notas = input(f"ingrese 5 notas, una a la vez para el alumno:{i}-{nombres[i]} lugar: {j+1} ")    
                
                if len(notas) == 2 and ord(notas[0])== ord("1") and ord(notas[1])== ord("0"): #si son dos cifras y a la vez son 1 y 0
                    lista_suplente[i] = int(notas)     #añadir a la lista 
                    break  #rompo aca para que no recorra todo el resto del codigo 

                elif len(notas)== 2:  #si son dos cifras 
                    print("caracter/es no validos")
                    continue  #lo excluyo 
            
                if len(notas)== 1 :     #si la cifra es 1, 
                    if ord(notas) >57 or ord(notas)<48: #valido que sea numero 
                        print("caracter invalido, ingrese un numero")
                        continue
                    else:               #lo que logre pasar por todo lo anterior es añadido 
                        lista_suplente[i] = int(notas) 
                        break
                if len(notas) >2:  # si el largo es mayor a dos, lo descarto  
                    print("invalido, la nota debe ser de 2 cifras como maximo")
                    continue
                break
                        #banderita = True
        lista = lista_suplente
                    
    
        

    return lista 




#carga legajos + validacion de numeros y 5 cifras 

def cargar_legajos_en(lista: list, nombres):
    lista_suplente = iniciar_matriz(30, 1, 0)
    
    for i in range(len(lista)):
        for j in range(len(lista[i])):
            while True:                                     #escribo j+1 para que no empiece a contar desde 0 
                notas = input(f"Ingrese un legajo de 5 números para el alumno {i}-{nombres[i]} lugar {j+1}: ")

                if len(notas) != 5: # valido que sean 5 
                    print("invalido, ingrese un numero de 5 cifras  ")
                    continue   #si no lo son, los excluyo 
                
                bandera = True  #la pongo aca porque quiero que se reinicie en cada pasada
                for k in notas:    #este for lo necesito para iterar 1x1 los 5 numeros del legajo
                    if ord(k) < 48 or ord(k) > 57:   #valido si son numeros 
                        bandera = False
                        break  

                if bandera == False:
                    print("No valido, ingresa solamente numeros")
                    continue

                # Si pasa los filtros guardo el valor
                lista_suplente[i][j] = int(notas)
                print("Legajo cargado correctamente  ")
                break  

    lista = lista_suplente
    return lista
 


#i + 1, 



#funcion util 3 
#carga aleatoria
def cargar_aleatoriamente(matriz:list):
    seguir = "S"
    while seguir == "S":
        fila = int(input("indice de fila:  "))
        columna = int(input("indice de columna: "))
        dato = int(input("ingrese el numero a cargar"))
        matriz[fila][columna] = dato
        seguir = input("desea seguir cargando?  S/N   ")

    return matriz 






#busqueda en matrices



#funcion util 4 
#buscar valor entero en matriz 
def buscar_valor_entero(matriz:list,valor:int):
    for i in range(len(matriz)):
        for j in range(len(matriz[i])):
            if matriz[i][j] == valor:
                print(f"Se encontro el numero en fila {i} columna {j}! ")

    
#buscar valor flotante en matriz 
def buscar_valor_flotante(matriz:list,valor:float):
    for i in range(len(matriz)):
        for j in range(len(matriz[i])):
            if matriz[i][j] == valor:
                print(f"Se encontro el numero en fila {i} columna {j}! ")


#trabaja con listas de float
#busca los numeros mayores o iguales al ingresado 
def mayor_o_igual_float_listas(lista:list,valor,lista_nombres:list):

    for i in range(len(lista)):
        if lista[i] > valor:
            print(f"Promedio : {lista[i]} alumno : {lista_nombres[i]} ")

        if lista[i] == valor:
            print(f"Promedio :  {valor} alumno : {lista_nombres[i]}")




#esto trabaja con matrices (lista de listas) 
def buscar_mayor_o_igual_flotante_matrices(lista:list,valor):
    for i in range(len(lista)):
        for j in range(len(lista[i])):
            if lista[i][j] == round(valor):
                print(f"Se encontro el promedio {valor} en fila {i} columna {j} ")

            if lista[i][j] > valor:
                print(f"se encontro  {lista[i][j]} en fila {i} columna {j} ")
            



    



#buscar mayor con SWAP 
def ubicar_mayor(lista:list):
    ingreso = 1
    
    for i in range(len(lista)):
        for j in range(len(lista[i])):
            if lista[i][j] > ingreso: #si a es mayor a b
                temp = lista[i][j]   #guardo a (osea el mayor) en temp 
                lista[i][j] = ingreso      #en a guardo el otro valor menor 
                ingreso = temp   #y en b guardo el valor de temp ( osea el mayor )
              #  print(f"el mayor es {ingreso} ubicado en {i}, {j}")
    return ingreso 





#promedios
#en lista simple
def funcion_promedio(listo:list):
    suma = 0
    for i in listo:
        suma += i
        promedio = suma / len(listo)
        
    return promedio



#promedio en matrices
def promedio_en_matrices(matriz:list)->list[float]:
    promedios_guardados = []
   

    for i in matriz:   #recorro la matriz 
        suma_de_numeros = 0

        for j in i: #recorro numero por numero dentro de las sublistas 
            suma_de_numeros += j  # aca sumo cada elemento de la sublista [0,1,2,3,4] = [10] por ejemplo
             
        promedio = suma_de_numeros /len(i) #la suma de numeros dividida el largo de la sublista  [10] / 5 
        promedios_guardados += [promedio] #lo sumo a la lista final
            
   
    return promedios_guardados


'''#probar esto antes de usarlo seriamente 
def con_esto_promedio_listas(listo: list) -> list:
    n = len(listo)
    promedios = [0.0] * n            # pre-alocación (no append)
    for i in range(n):
        sub = listo[i]               # la sublista actual
        total = 0
        # sumar los elementos sin usar sum()
        for j in range(len(sub)):
            total = total + sub[j]   # suma acumulada (algorítmica)
        # calcular promedio (si la sublista no está vacía)
        if len(sub) != 0:
            promedios[i] = total / len(sub)
        else:
            promedios[i] = 0.0
    return promedios

'''



#esta genera notas con random
def notas_creadas(notas:list):
    
    for i in range(3):   #genera 3 
        lista_notas = random.randint(1,10) #entre 1 y 10
        notas[i] = lista_notas    #las agrega a una lista y devuelve 

    return notas 


#crea una lista simple
def crear_lista(cantidad:int):
    lista = [0] * cantidad

    return lista 



#valida si lo seleccionado es numero, devuelve True/False
def validar_SOLOUNO_numero_booleano(caracter: str) -> bool:
    if ord(caracter) >= 48 and ord(caracter) <= 57:
        return True  
    else:
        return False 


#hecha en clase por un compañero 
#devuelve el indice de un elemento 
def retornar_indice_elemento(lista: list, dato_a_buscar: int) -> int :
    indice_elemento = -1 # inicializado en el caso de no haberlo encontrado
    
    for i in range(len(lista)):
        if lista[i] == dato_a_buscar:
            indice_elemento = i # Cambiar a indice del elemento si se encuenatr
            break # cortar ejecucion debido a que se encontro
    
    return indice_elemento



#funcion del punto 2 
def imprimir_todo(nombres, notas, generos, legajos):
    print(f"{'NOMBRE':<10} | {'NOTAS':<20} | {'GENERO':<6} | {'LEGAJO':<6}")
    print("-" * 55)  # línea 

    for i in range(len(nombres)):
        print(f"{nombres[i]:<10} | {str(notas[i]):<20} | {generos[i]:<6} | {legajos[i]:<6}")


#Funcion del punto 2 
def mostrar_uno(nombres,notas,generos,legajos):
    ingreso = input("ingrese el nombre del estudiante que desea ver: ")
    
    if verificar_cadena_alfabetica(ingreso) == True:
        for i in range(len(nombres)):
            
            if nombres[i] == ingreso:
                print(f"{'NOMBRE' :<10}| {'NOTAS':<20}| {'GENERO':<6}| {'LEGAJO':<6}")
                print(f"{nombres[i]:<10}| {str(notas[i]):<20}| {generos[i]:<6}| {legajos[i]:<6}")
    else:
        ingreso = input("ingrese el nombre del estudiante que desea ver: ")




#ESTA FUNCION ENTERA ES EL PUNTO 2 
def mostrar_uno_y_todos(nombres,notas,generos,legajos):
    while True:
        eleccion = input("Seleccione una opcion: \n 1- Mostrar todo \n 2- Mostrar un alumno \n 3-Volver")
        match eleccion:
            case "1":
                imprimir_todo(nombres,notas,generos,legajos)
                
            case "2":
                mostrar_uno(nombres,notas,generos,legajos)
            case "3":
                False
                break





#funciones del punto 4 
    
    
#orden de lista simple ascendente 
def ordenar_lista_ascendente(lista:list):
    for i in range(len(lista)):
        for j in range(len(lista)):
            if lista[i] > lista[j]:
                aux = lista[i] 
                lista[i] = lista[j]
                lista[j] = aux
        

    return lista



#orden de lista simple descendente 
def ordenar_lista_descendente(lista:list):
    for i in range(len(lista)):
        for j in range(len(lista)):
            if lista[i] < lista[j]:
                aux = lista[i] 
                lista[i] = lista[j]
                lista[j] = aux
        

    return lista


# ESTAS SOLAMENTE IMPRIMEN  
# misma logica que las funciones de arriba, pero con mas variables: 


#orden de lista ascendente 
def ordenar_lista_por_promedio_ascendente(promedios,nombres,notas,generos,legajos):
    for i in range(len(promedios)):
        for j in range(len(promedios)):
            
            if promedios[i] > promedios[j]:
                aux_promedios = promedios[i] 
                promedios[i] = promedios[j]
                promedios[j] = aux_promedios

                aux_nombres = nombres[i]
                nombres[i] = nombres[j]
                nombres[j] = aux_nombres

                aux_notas = notas[i]
                notas[i] = notas[j]
                notas[j] = aux_notas

                aux_generos = generos[i]
                generos[i] = generos[j]
                generos[j] = aux_generos

                aux_leg = legajos[i]
                legajos[i] = legajos[j]
                legajos[j] = aux_leg

    print(f"{'PROMEDIO':<10} |{'NOMBRES':<10} |{'NOTAS':<18} |{'GENERO':<6} |{'LEGAJO':<10}")
    for q in range(len(promedios)):    
        print(f"{promedios[q]:<10} |{nombres[q]:<10} |{str(notas[q]):<18} |{generos[q]:<6} |{legajos[q]:<10}")



#ordenar lista con promedio descendente 
def ordenar_lista_por_promedio_descendente(promedios,nombres,notas,generos,legajos):
    for i in range(len(promedios)):
        for j in range(len(promedios)):
            
            if promedios[i] < promedios[j]:
                aux_promedios = promedios[i] 
                promedios[i] = promedios[j]
                promedios[j] = aux_promedios

                aux_nombres = nombres[i]
                nombres[i] = nombres[j]
                nombres[j] = aux_nombres

                aux_notas = notas[i]
                notas[i] = notas[j]
                notas[j] = aux_notas

                aux_generos = generos[i]
                generos[i] = generos[j]
                generos[j] = aux_generos

                aux_leg = legajos[i]
                legajos[i] = legajos[j]
                legajos[j] = aux_leg
    
    print(f"{'PROMEDIO':<10} |{'NOMBRES':<10} |{'NOTAS':<18} |{'GENERO':<6} |{'LEGAJO':<10}")
    for q in range(len(promedios)):    
        print(f"{promedios[q]:<10} |{nombres[q]:<10} |{str(notas[q]):<18} |{generos[q]:<6} |{legajos[q]:<10}")



#recibe las listas para mostrar promedio mayor o menor segun se le indique por input 
def mostrar_ascendente_o_descendente(promedios,nombres,notas,generos,legajos):
    while True:
        eleccion = input("Seleccione una opcion: \n 1- Mostrar datos por promedio mayor a menor  \n 2- Mostrar datos por promedio de menor a mayor \n 3-Volver  ")
        
        match eleccion:
            case "1":
                ordenar_lista_por_promedio_ascendente(promedios,nombres,notas,generos,legajos)

            case "2":
                ordenar_lista_por_promedio_descendente(promedios,nombres,notas,generos,legajos)

            case "3":
                False
                break



#funcion del punto 4 
#imprime recibiendo como primer parametro el promedio ordenado de menor a mayor 
def imprimir_con_promedio(promedio,nombres,notas,generos,legajos):
    print(f"{'PROMEDIO':<10} |{'NOMBRES':<10} |{'NOTAS':<18} |{'GENERO':<6} |{'LEGAJO':<10}")
    for i in range(len(promedio)):
        
        print(f"{promedio[i]:<10} |{nombres[i]:<10} |{str(notas[i]):<18} |{generos[i]:<6} |{legajos[i]:<10}")



#funciones punto 5 



    
#ubica y devuelve el mayor de cada sublista (trabaja matrices)
def mayores_en_sublistas(matriz: list):
    mayores = [0] * len(matriz)  
    
    for i in range(len(matriz)):        
        mayor = matriz[i][0]  # supongo que el primero es el mayor
        for j in range(1, len(matriz[i])):  # recorro el resto de los elementos
            if matriz[i][j] > mayor:
                mayor = matriz[i][j]
                
        mayores[i] = mayor # guardo el mayor 


    return mayores




'''maiores = mayores_en_sublistas(notas_hardcode)
print(maiores)
'''


   



#FUNCIONES PUNTO 6 


def mostrar_uno_por_legajo(promedios,nombres,notas,generos,legajos):
    ingreso = input("ingrese el legajo del estudiante que desea ver: ")
    
    if verificar_numero_string(ingreso) == True:
        for i in range(len(legajos)):
            
            if legajos[i] == ingreso:
                print(f"{'NOMBRE' :<10}| {'NOTAS':<20}|{'promedio':<10} |{'GENERO':<6}| {'LEGAJO':<6}")
                print(f"{nombres[i]:<10}| {str(notas[i]):<20}|{promedios[i]:<10} |{generos[i]:<6}| {legajos[i]:<6}")
    else:
        ingreso = input("ingrese el legajo del estudiante que desea ver: ")


def imprimir_con_promedio_legajo(promedio,nombres,notas,generos,legajos):
    print(f"|{'LEGAJO':<10} |{'PROMEDIO':<10} |{'NOMBRES':<10} |{'NOTAS':<18} |{'GENERO':<6} ")
    for i in range(len(nombres)):
        
        print(f"{legajos[i]:<10} |{promedio[i]:<10} |{nombres[i]:<10} |{str(notas[i]):<18} |{generos[i]:<6} |")


def mostrar_todo_por_legajo(promedios,nombres,notas,generos,legajos):
    while True:
        ingreso = input("Que desea hacer ? \n -1 Buscar un estudiante ingresando su legajo \n 2- mostrar todos")
        
        match ingreso:
            case "1":
                mostrar_uno_por_legajo(promedios,nombres,notas,generos,legajos)
            case "2":
                imprimir_con_promedio_legajo(promedios,nombres,notas,generos,legajos)
            case "3":

                break



    


def mayor_float(lista:list[float]):
    for i in range(len(lista)):
        for j in range(len(lista)):
            if lista[i] > lista[j]:
                aux = lista[i]
                lista[i] = lista[j]
                lista[j] = aux 
            
    return lista



#pruebas:  #requiere una lista, y un indice de columna (ej: lista1,2)
def sumar_por_columnas_y_promediar(lista:list,columna:int):
    suma_columnas = 0
    divisor = len(lista)
    
    for i in lista:
        suma_columnas += i[columna]
    
    promedio_de_columna = suma_columnas / divisor


    return promedio_de_columna

'''colu = sumar_por_columnas_y_promediar(notas_hardcode,0)
print(colu)
'''



def sumar_y_ordenar_promedios_de_columnas(lista):
    while True:
        opciones = input("que desea ver? \n 1- Promedios de todas las notas de mayor a menor \n 2- Ver la materia con promedio mas alto \n 3-Volver  ")
        match opciones:
            case "1":
                lista_de_sumas = []     #voy a guardar aca 
                promedio_columna0 =sumar_por_columnas_y_promediar(lista,0) # esta funcion suma los numeros de una lista segun el indice que se le de, 0 en este caso
                promedio_columna1 = sumar_por_columnas_y_promediar(lista,1) # retorna el promedio de las columnas de la lista 
                promedio_columna2 = sumar_por_columnas_y_promediar(lista,2)
                promedio_columna3 = sumar_por_columnas_y_promediar(lista,3)
                promedio_columna4 = sumar_por_columnas_y_promediar(lista,4)
                lista_de_sumas += [promedio_columna0]    #sumo todos a una lista final 
                lista_de_sumas += [promedio_columna1]
                lista_de_sumas += [promedio_columna2]
                lista_de_sumas += [promedio_columna3]
                lista_de_sumas += [promedio_columna4]

                promedios_mayores = ordenar_lista_ascendente(lista_de_sumas)  #aca ordeno los promedios 
                for i in range(len(promedios_mayores)):                       #imprimo prolijamente
                    print(f"MATERIA_{i+1}: {str(promedios_mayores[i]) :<10}")  
                                            #lo tengo que castear a string asi porque da error 
            
            case "2":
                lista_de_sumas = []
                promedio_columna0 =sumar_por_columnas_y_promediar(lista,0)
                promedio_columna1 = sumar_por_columnas_y_promediar(lista,1)
                promedio_columna2 = sumar_por_columnas_y_promediar(lista,2)
                promedio_columna3 = sumar_por_columnas_y_promediar(lista,3)
                promedio_columna4 = sumar_por_columnas_y_promediar(lista,4)
                lista_de_sumas += [promedio_columna0]
                lista_de_sumas += [promedio_columna1]
                lista_de_sumas += [promedio_columna2]
                lista_de_sumas += [promedio_columna3]
                lista_de_sumas += [promedio_columna4]

                lista_ordenada = ordenar_lista_ascendente(lista_de_sumas)
                for i in range(len(lista_ordenada)):
                    el_promedio_mayor = lista_de_sumas[0]
                
                print(f"LA MATERIA CON MAYOR PROMEDIO MAYOR ES  : {el_promedio_mayor} \n\n")

            case "3":
                break


def encontrar_mayor_por_fila(matriz:list[int]) -> list[int]:
    """Devuelve una lista con el mayor número de cada fila."""
    mayores = []
    for fila in matriz:
        mayor = fila[0]  # asumimos el primero como el mayor
        for num in fila:
            if num > mayor:
                mayor = num
        mayores += [mayor]
    return mayores





#original
'''def retornar_indice_elemento(lista: list, dato_a_buscar: int) -> int :
    indice_elemento = -1 # inicializado en el caso de no haberlo encontrado
    
    for i in range(len(lista)):
        if lista[i] == dato_a_buscar:
            indice_elemento = i # Cambiar a indice del elemento si se encuenatr
            break # cortar ejecucion debido a que se encontro
    
    return indice_elemento'''


def retornar_indice_elemento_lista(lista:list, dato_a_buscar:int):
    indice_elemento = -1 # inicializado en el caso de no haberlo encontrado
    for i in range(len(lista)):
        if lista[i] == dato_a_buscar:
            indice_elemento = i # Cambiar a indice del elemento si se encuenatr
            break # cortar ejecucion debido a que se encontro
    
    return indice_elemento



def encontrar_mayor_por_fila_lista(matriz):
    mayores = []

    for i in range(len(matriz)):
        mayor = matriz[i][0]
        for j in range(len(matriz[i])):
            if matriz[i][j] > mayor:
                mayor = matriz[i][j]

        mayores += [mayor]


    return mayores




